service: solutions

frameworkVersion: "3"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    stages:
      - ${sls:stage}
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs16.x
  environment:
    DYNAMODB_TABLE: ${self:service}-${sls:stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:DeleteTable
            - dynamodb:CreateTable
          Resource: "arn:aws:dynamodb:${aws:region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  get:
    handler: solutions/get.get
    events:
      - http:
          path: solutions/{id}
          method: get
          cors: true

  delete:
    handler: solutions/delete.resetSolutionsTable
    events:
      - http:
          path: solutions
          method: delete
          cors: true

resources:
  Resources:
    SolutionsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
        AttributeDefinitions:
          - 
            AttributeName: id
            AttributeType: S
        KeySchema:
          - 
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
